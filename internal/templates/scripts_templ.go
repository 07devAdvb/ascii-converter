// Code generated by templ - DO NOT EDIT.

// templ: version: v0.2.771
package templates

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

func Scripts() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<script>\r\n        const dropZone = document.getElementById('paste-container');\r\n        const fileInput = document.getElementById('image');\r\n        \r\n        // Prevent default behavior for drag and drop events\r\n        ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {\r\n            dropZone.addEventListener(eventName, (e) => {\r\n                e.preventDefault();\r\n                e.stopPropagation();\r\n            }, false);\r\n        });\r\n\r\n        // Add highlight when dragging over the drop zone\r\n        dropZone.addEventListener('dragenter', () => {\r\n            dropZone.classList.add('highlight');\r\n        }, false);\r\n\r\n        // Remove highlight when dragging leaves the drop zone\r\n        dropZone.addEventListener('dragleave', () => {\r\n            dropZone.classList.remove('highlight');\r\n        }, false);\r\n\r\n        // Handle file drop\r\n        dropZone.addEventListener('drop', (e) => {\r\n            const dt = e.dataTransfer;\r\n            const files = dt.files;\r\n\r\n            if (files.length > 0 && files[0].type.startsWith('image/')) {\r\n                // Set the file to the input for form submission\r\n                fileInput.files = dt.files;\r\n\r\n                // Optionally, change the text or appearance of the drop zone after the file is dropped\r\n                dropZone.innerHTML = `\r\n                    <form hx-post=\"/convert-to-ascii\" hx-target=\"#output\" enctype=\"multipart/form-data\">\r\n                        <label for=\"image\">\r\n                            Image ready!\r\n                            <input type=\"file\" id=\"image\" name=\"image\" accept=\"image/*\" alt=\"Upload image for ASCII conversion\" required>\r\n                        </label>\r\n                        <button type=\"submit\">Generate ASCII</button>\r\n                    </form>\r\n                `;\r\n            } else {\r\n                alert('Please drop an image file.');\r\n            }\r\n        }, false);\r\n    </script>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return templ_7745c5c3_Err
	})
}

var _ = templruntime.GeneratedTemplate
